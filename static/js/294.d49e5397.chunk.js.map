{"version":3,"file":"static/js/294.d49e5397.chunk.js","mappings":"wLACA,EAAwB,qBAAxB,EAA8D,8B,gDCOxDA,EAAY,SAACC,GACjB,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEdC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBT,EAAMU,MACJF,EAAOJ,MACPI,EAAOH,SACPG,EAAOF,WACPG,GAEFE,QAAQC,IAAIJ,IAEdK,iBAAkBC,EAAAA,GAAW,CAC3BV,MAAOU,EAAAA,KAAaC,SAAS,YAC7BV,SAAUS,EAAAA,KAAaC,SAAS,gBAGpC,OACE,0BACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAMR,SAAUN,EAAOe,aAAvB,WACE,0BACE,SAAC,KAAD,CACEC,KAAM,QACNC,KAAM,QACNC,YAAa,cACbC,SAAUnB,EAAOoB,aACjBC,OAAQrB,EAAOsB,eAGlBtB,EAAOuB,OAAOpB,OAASH,EAAOwB,QAAQrB,OACrC,cAAGsB,UAAWC,EAAd,sBACE,MACJ,0BACE,SAAC,KAAD,CACEV,KAAM,WACNC,KAAM,WACNC,YAAa,iBACbC,SAAUnB,EAAOoB,aACjBC,OAAQrB,EAAOsB,eAGlBtB,EAAOuB,OAAOnB,UAAYJ,EAAOwB,QAAQpB,UACxC,cAAGqB,UAAWC,EAAd,sBACE,MACJ,yBACG1B,EAAOO,OAAOoB,SACb,iBAAMF,UAAWC,EAAjB,SAAoC1B,EAAOO,OAAOoB,UAChD,QAEN,4BACE,SAAC,KAAD,CACEX,KAAK,WACLC,KAAM,aACNE,SAAUnB,EAAOoB,aACjBC,OAAQrB,EAAOsB,WACfM,QAAS5B,EAAOO,OAAOF,cAEzB,kBAAOwB,QAAS,aAAhB,6BAEF,mBAAQb,KAAM,SAAd,4BAwBV,GAAec,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,UAGmB,CAAEvB,MAAAA,EAAAA,IAA1C,EAjBc,SAACV,GACb,OAAIA,EAAMiC,QACD,SAAC,KAAD,CAAUE,GAAI,cAIrB,4BACE,mCACA,SAACpC,EAAD,CAAWW,MAAOV,EAAMU","sources":["webpack://react-simple-1/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Login_error__UrvJb\",\"incorrectError\":\"Login_incorrectError__R2Sls\"};","import React, { useState } from \"react\";\r\nimport { Formik, Form, Field, useFormik } from \"formik\";\r\nimport s from \"./Login.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport * as Yup from \"yup\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst LoginForm = (props) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      rememberMe: false,\r\n    },\r\n    onSubmit: (values, { setFieldValue }) => {\r\n      props.login(\r\n        values.email,\r\n        values.password,\r\n        values.rememberMe,\r\n        setFieldValue\r\n      );\r\n      console.log(values);\r\n    },\r\n    validationSchema: Yup.object({\r\n      email: Yup.string().required(\"Required\"),\r\n      password: Yup.string().required(\"Required\"),\r\n    }),\r\n  });\r\n  return (\r\n    <div>\r\n      <Formik>\r\n        <Form onSubmit={formik.handleSubmit}>\r\n          <div>\r\n            <Field\r\n              type={\"email\"}\r\n              name={\"email\"}\r\n              placeholder={\"Enter email\"}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n            />\r\n          </div>\r\n          {formik.errors.email && formik.touched.email ? (\r\n            <p className={s.error}>Required</p>\r\n          ) : null}\r\n          <div>\r\n            <Field\r\n              type={\"password\"}\r\n              name={\"password\"}\r\n              placeholder={\"Enter password\"}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n            />\r\n          </div>\r\n          {formik.errors.password && formik.touched.password ? (\r\n            <p className={s.error}>Required</p>\r\n          ) : null}\r\n          <div>\r\n            {formik.values.general ? (\r\n              <span className={s.incorrectError}>{formik.values.general}</span>\r\n            ) : null}\r\n          </div>\r\n          <div>\r\n            <Field\r\n              type=\"checkbox\"\r\n              name={\"rememberMe\"}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              checked={formik.values.rememberMe}\r\n            />\r\n            <label htmlFor={\"rememberMe\"}>remember me</label>\r\n          </div>\r\n          <button type={\"submit\"}>Log in</button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Login = (props) => {\r\n  if (props.isAuth) {\r\n    return <Navigate to={\"/profile\"} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginForm login={props.login} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"],"names":["LoginForm","props","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","setFieldValue","login","console","log","validationSchema","Yup","required","handleSubmit","type","name","placeholder","onChange","handleChange","onBlur","handleBlur","errors","touched","className","s","general","checked","htmlFor","connect","state","isAuth","auth","to"],"sourceRoot":""}